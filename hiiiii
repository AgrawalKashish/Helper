#!/usr/local/bin/python3
# Modified by William Thomas & You
# Refactored to use argparse instead of sys.argv for Checkmarx compliance.
# This script generates a report comparing two branches for one or more repositories.
# It uses branch names provided via command-line arguments and accepts repository pathsâ€”
# only the repo path is passed to the comparison function.

import os
import re
import subprocess
import argparse

# Global branch variables (placeholders)
BASE_BRANCH = ""
FEATURE_BRANCH = ""

def run(cmd, cwd=None):
    if not cwd:
        cwd = os.getcwd()
    proc = subprocess.Popen(
        cmd,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        shell=True,
        cwd=cwd
    )
    stdout, stderr = proc.communicate()
    return proc.returncode, stdout.decode("utf-8").strip(), stderr.decode("utf-8").strip()

def runComparison(base, feature, cwd=None):
    # Run git diff --stat without piping to tail.
    cmd = f"git --no-pager diff --stat origin/{base}..origin/{feature}"
    retcode, output, err = run(cmd, cwd)
    if retcode != 0:
        return retcode, "", err
    # Process output in Python: split by lines and take the last non-empty line.
    lines = [line for line in output.splitlines() if line.strip()]
    last_line = lines[-1] if lines else ""
    return retcode, last_line, err

def parseDiff(diff):
    regex = r"(\d+).*file[^\d]+(\d+).*insertion[^\d]+(\d+).*deletion"
    matches = re.finditer(regex, diff, re.MULTILINE)
    for match in matches:
        if len(match.groups()) == 3:
            return {
                "files": int(match.group(1)),
                "insertions": int(match.group(2)),
                "deletions": int(match.group(3)),
            }
    return False

def compare(base, feature, cwd=None):
    code, out, err = runComparison(base, feature, cwd)
    if err:
        print("Error comparing branches:", err)
        return False
    return parseDiff(out)

def getRepoName(cwd=None):
    # Use Git to get the top-level directory and then os.path.basename.
    code, out, err = run("git rev-parse --show-toplevel", cwd)
    if code != 0 or err:
        return None
    return os.path.basename(out)

def printComparisonReport(base, feature, repoName, files, insertions, deletions):
    print(f"Comparing {base} \u2190 {feature} ({repoName}):")
    print(f"Files changed: {files}")
    print(f"Additions: {insertions}")
    print(f"Deletions: {deletions}")
    print(f"Total changes: {insertions + deletions}")
    print("-" * 40)

# This function takes only the repository path.
def runComparisonForRepo(repo_path):
    repoName = getRepoName(repo_path)
    if not repoName:
        print("Not a git repository:", repo_path)
        return None

    result = compare(BASE_BRANCH, FEATURE_BRANCH, repo_path)
    if not result:
        return None

    result["repo"] = repoName
    printComparisonReport(
        BASE_BRANCH,
        FEATURE_BRANCH,
        repoName,
        result["files"],
        result["insertions"],
        result["deletions"]
    )
    return result

def parse_arguments():
    parser = argparse.ArgumentParser(
        description="Generate a report comparing two Git branches for one or more repositories."
    )

    parser.add_argument(
        "base_branch",
        type=str,
        help="Name of the base branch to compare from"
    )
    parser.add_argument(
        "feature_branch",
        type=str,
        help="Name of the feature branch to compare against"
    )
    parser.add_argument(
        "repositories",
        nargs="*",
        default=[os.getcwd()],
        help=(
            "Paths to Git repositories (defaults to current directory "
            "if none specified)"
        )
    )

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_arguments()

    # Update the global branch names from parsed arguments
    BASE_BRANCH = args.base_branch
    FEATURE_BRANCH = args.feature_branch

    # Use provided repository paths or default to the current directory
    repo_paths = args.repositories

    results = []
    for repo in repo_paths:
        print("Processing repository at:", repo)
        res = runComparisonForRepo(repo)
        if res:
            results.append(res)
        else:
            print("Failed to process repository at:", repo)
        print()

    # If more than one repository was processed, print a cumulative summary.
    if len(results) > 1:
        total_files = sum(r.get("files", 0) for r in results)
        total_insertions = sum(r.get("insertions", 0) for r in results)
        total_deletions = sum(r.get("deletions", 0) for r in results)
        print("CUMULATIVE SUMMARY:")
        printComparisonReport(
            BASE_BRANCH,
            FEATURE_BRANCH,
            "Total",
            total_files,
            total_insertions,
            total_deletions
        )
